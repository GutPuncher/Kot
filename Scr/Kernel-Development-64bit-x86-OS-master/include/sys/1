#ifndef __TASK_H__
#define __TASK_H__
//#define PAGE_SIZE		0x1000
#define USER_STACK_TOP		0xF0000000
#define HEAP_START		0x08000000
 
#include <sys/defs.h>

//typedef struct vm_area_struct vma_struct;
//typedef struct mm_struct mm_struct;
 
extern void initTasking();
 
struct reg_struct 
{
    uint64_t rip;
    uint64_t rflags;
    uint64_t rax,rcx,rdx,rbx;
    uint64_t rsi,rdi,rsp;
    uint64_t r8,r9,r10,r11,r12,r13,r14,r15,cr3;
};

struct mm_struct {
       struct vma_struct *mmap;
       struct vma_struct *current;
	uint64_t start_code, end_code, start_data, end_data;
	uint64_t start_brk, brk, start_stack;
	uint64_t arg_start, arg_end, env_start, env_end;
	uint64_t rss, total_vm, locked_vm;
};


struct task_struct 
{
    struct reg_struct regs;
    struct task_struct *next;
    uint64_t kstack[512]; 
    uint64_t *task_rsp;
    uint64_t *task_cr3;
    struct mm_struct * mm;	
//    struct fd* fd[MAX_FD];	
};
 
struct vm_area_struct {
        struct mm_struct *mm;
	uint64_t start;              // Our start address within vm_mm
	uint64_t end;                // The first byte after our end address within vm_mm
	struct vma_struct *next;            // linked list of VM areas per task, sorted by address
	uint64_t flags;              // Flags read, write, execute permissions
	uint64_t type;               // type of segment its refering to
	struct file *file;           // reference to file descriptors for file opened for writing
};



extern void createTask(struct task_struct*, void(*)(),uint64_t, uint64_t*);

extern void changeTask();

extern void switch_to(struct task_struct *previous,struct task_struct *current); // switch from old to new
extern void switch_to_ring3();
 
#endif 
