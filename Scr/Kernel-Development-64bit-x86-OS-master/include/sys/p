#ifndef _PROCESS_H
#define _PROCESS_H

#include <sys/list.h>

#define SIGKILL             9
#define NR_TASKS            128
#define TRAP_SIZE           5
#define TSS_OFFSET          1
#define DIR_LEN             48
#define BINARY_LEN          24
#define USER_STACK_SIZE     512
#define KERNEL_STACK_SIZE   512
#define NUM_REGISTERS_SAVED 15
#define STACK_OFFSET        KERNEL_STACK_SIZE - NUM_REGISTERS_SAVED - TRAP_SIZE - TSS_OFFSET

//Task States
#define TASK_NEW                1
#define TASK_READY		1
#define TASK_RUNNING		2
#define TASK_INTERRUPTIBLE	3
#define TASK_UNINTERRUPTIBLE	4
#define TASK_STOPPED		5
#define TASK_ZOMBIE		6
#define TASK_WAITING		7

struct tss_struct {
    uint64_t rip;
    uint64_t rflags;
    uint64_t rax,rcx,rdx,rbx;
    uint64_t rsi,rdi,rbp;
    uint64_t r8,r9,r10,r11,r12,r13,r14,r15;
};

struct mm_struct {
    int count;
    uint64_t * pt; // page table pointer  
    unsigned long context;
    unsigned long start_code, end_code, start_data, end_data;
    unsigned long start_brk, brk, start_stack, start_mmap;
    unsigned long def_flags;
};

struct task_struct
{
    volatile int16_t state;
    uint16_t pid;
    uint16_t ppid;
    char dir_path[DIR_LEN];
    char bin_name[BINARY_LEN];
    bool is_sleep;
    int64_t sleep_time;    
    uint64_t *stack;     /* user stack */
    uint64_t kstack[KERNEL_STACK_SIZE];     /* maintain one kernel stack per task */
    uint64_t *kernel_rsp;
    uint64_t cr3_address;
    uint64_t pml4e_addr;            /* REML: Virtual address of cr3 */
    uint64_t entry_pt;
    struct File fd[25];
    uint64_t dup_arr[25];
    int fd_cnt;	
    struct mm_struct *mm;
    struct list_head tasks;

};

struct task_struct *currentTask;
struct task_struct *nextTask;
uint16_t avail_pid;
void awake();
void schedule();
void sys_yield();
void awakepid(pid_t pid);
void printSchedulerQueue();
struct task_struct *getNextTask();
struct task_struct *getCurrentTask();
int addTasktoQueue(struct task_struct *task);
int addTasktoQueueHead(struct task_struct *task);

/* Process functions */
struct task_struct *initTask(uint64_t entry_point);
struct task_struct *create_process(const char *binary);
void init_process(uint64_t *stack);
void allocate(uint64_t pml4e_addr, void * addr, int len);
vma* allocate_vma(vma **vma_head);

#endif


