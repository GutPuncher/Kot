#include "sys/task.h"
#include "sys/kprintf.h"
#include "sys/pmap.h"
#include "sys/gdt.h"
static struct task_struct *runningTask;
static struct task_struct mainTask;
static struct task_struct otherTask;
 
void switch_to_ring3();

static void userMain()
{

 kprintf("Hello User world!");
 while (1);
}

static void otherMain() 

{
//    kprintf("Hello multitasking world!"); // Not implemented here...
//    changeTask();
//      initialise_syscalls(); 
      switch_to_ring3();

}
 
void initTasking() 

{
   __asm__ __volatile__("movq %%cr3, %%rax; movq %%rax, %0;":"=g"(mainTask.regs.cr3)::"memory"); 
   __asm__ __volatile__("pushfq; movq (%%rsp), %%rax; movq %%rax, %0; popfq;":"=g"(mainTask.regs.rflags)::"memory");
    createTask(&otherTask, otherMain,mainTask.regs.rflags, (uint64_t*)mainTask.regs.cr3);
    mainTask.next = &otherTask;
    otherTask.next = &mainTask; 
    runningTask = &mainTask;
    
}
 
void createTask(struct task_struct *task, void (*otherMainIP)(),uint64_t flags, uint64_t *pagedir) 
{
    task->regs.rax = 0;
    task->regs.rbx = 0;
    task->regs.rcx = 0;
    task->regs.rdx = 0;
    task->regs.rsi = 0;
    task->regs.rdi = 0;
    task->regs.rflags = flags;
    task->regs.rip = (uint64_t) otherMainIP;
    task->regs.cr3 = (uint64_t) pagedir;
    task->regs.rsp = (page_alloc() +(uint64_t)0xFA0);
    task->next = 0;
    uint64_t * ptr = ( uint64_t *) (task->regs.rsp + 0x30);
    * ptr = task->regs.rip;
}
 
void switchTask(struct task_struct *from, struct task_struct *to)

{
    __asm__ __volatile__("pushq %rax");
    __asm__ __volatile__("pushq %rbx");
    __asm__ __volatile__("pushq %rcx");
    __asm__ __volatile__("pushq %rdx"); 
    __asm__ __volatile__("pushq %rsi");
    __asm__ __volatile__("pushq %rdi");
    __asm__ __volatile__("movq %%rsp, %0":"=g"(from->regs.rsp)::"memory");
    __asm__ __volatile__("movq %0, %%rsp"::"m"(to->regs.rsp));
    __asm__ __volatile__("popq %rdi");
    __asm__ __volatile__("popq %rsi");
    __asm__ __volatile__("popq %rdx");
    __asm__ __volatile__("popq %rcx");
    __asm__ __volatile__("popq %rbx");
    __asm__ __volatile__("popq %rax");
    __asm__ __volatile__("retq");
  
}


void changeTask()

{
  struct task_struct *last = runningTask;
    runningTask = runningTask->next;
    switchTask(last, runningTask);
}

void switch_to_ring3()
{
uint64_t funcadd = (uint64_t)userMain;
uint64_t * rsp; 
uint64_t u_rsp = (page_alloc() +(uint64_t)0xFA0);


__asm__ __volatile__("cli");

__asm__ __volatile__("movq %%rsp,%0;":"=r"(rsp)::"memory");
set_tss_rsp(rsp);

__asm__ __volatile__("movq %0,%%rax;": : "r"(u_rsp));
__asm__ __volatile__("pushq $0x23");
__asm__ __volatile__("pushq %rax");
__asm__ __volatile__("pushfq");
__asm__ __volatile__("popq %rax");
__asm__ __volatile__("orq $0x200,%rax");
__asm__ __volatile__("pushq %rax");
__asm__ __volatile__("pushq $0x2B");
__asm__ __volatile__("pushq %0"::"r"(funcadd):"memory");
__asm__ __volatile__("sti");
__asm__ __volatile__("iretq");
set_tss_rsp(rsp);

}

