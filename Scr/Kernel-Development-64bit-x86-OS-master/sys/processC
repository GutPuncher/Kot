
task_struct *current;



int getProcessID()
{
	int id = 0;
	for(;id < MAX_PROCESS; id++) {
		if(processID[id] == 0) {
			processID[id] = 1;
			return id;
		}
	}
	return -1;
}

void context_switch(task_struct *next, task_struct *prev) 
{


	/* set the kernel stack */ 
	tss.rsp0 = next->init_kern;

	/* save the rsp pointer of the swapped process */
	__asm__ __volatile__ (
		"sti;"	
		"movq %%rsp, (%0)"
		::"r"(&(prev->kernel_stack))
	);

	/* move the stack pointer of current process to rsp register */ 
	__asm__ __volatile__ (
		"movq %0, %%rsp;"
		::"r"(next->kernel_stack)
	
	);

	/* move the current process page table base address to cr3 register */
	__asm__ __volatile__ (
		"movq %0, %%cr3;"
		::"r"(next->cr3)
	);

	/*
	 * save the instruction pointer for swapped process 
	 * and push the current process instruction pointer
	 * on the kernel stack
	 */
	__asm__ __volatile__ (
		"movq $1f, %0;"
		"pushq %1;"
		"retq;"
		"1:\t"
		:"=g"(prev->rip)
		:"r"(next->rip)
	);	

}


void schedule()
{
        task_struct *prev =  (task_struct*)current;
        current = current->next;
        if(current != prev)
            context_switch( (struct task_struct*)current, prev);

}

void switch_Ring3(task_struct *task){

	//
	set_tss_rsp(task->);
	//setting ds, es, fs and gs registers



}
